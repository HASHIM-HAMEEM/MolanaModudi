import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:logging/logging.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'package:modudi/features/books/data/models/book_models.dart';
import 'package:modudi/features/reading/domain/repositories/reading_repository.dart';
import 'package:modudi/features/reading/data/models/bookmark_model.dart';
import 'package:modudi/core/cache/cache_service.dart';
import 'package:modudi/core/cache/config/cache_constants.dart';
import 'package:modudi/core/providers/providers.dart';
import 'package:modudi/core/utils/connectivity_helper.dart';

/// Implementation of the Reading Repository with enhanced caching capabilities
/// Follows a cache-first strategy with stale-while-revalidate pattern for optimal performance
class ReadingRepositoryImpl implements ReadingRepository {
  final Logger _log = Logger('ReadingRepositoryImpl');
  final FirebaseFirestore _firestore;
  final CacheService _cacheService;
  final ConnectivityHelper _connectivityHelper;
  
  // Cache TTL settings
  static const Duration _bookCacheTtl = Duration(days: 7);
  static const Duration _headingCacheTtl = Duration(days: 7);
  static const Duration _bookmarkCacheTtl = Duration(days: 30);

  ReadingRepositoryImpl({
    FirebaseFirestore? firestore,
    CacheService? cacheService,
    ConnectivityHelper? connectivityHelper,
  }) : 
    _firestore = firestore ?? FirebaseFirestore.instance,
    _cacheService = cacheService ?? CacheService(),
    _connectivityHelper = connectivityHelper ?? ConnectivityHelper.instance();

  /// Get book data using a cache-first approach with background refresh
  @override
  Future<Book> getBookData(String bookId) async {
    try {
      _log.info('Getting book data for $bookId');
      
      // First check the cache
      final cacheKey = '${CacheConstants.bookKeyPrefix}$bookId';
      final cacheResult = await _cacheService.getCachedData<Map<String, dynamic>>(
        key: cacheKey,
        boxName: CacheConstants.booksBoxName,
      );
      
      // If we have a cache hit, use the cached data
      if (cacheResult.hasData) {
        _log.info('Cache hit for book $bookId');
        final cachedBook = Book.fromMap(bookId, cacheResult.data!)
          ..isFromCache = true;
        
        // Check if the cache is stale and refresh in background if online
        final cacheAge = DateTime.now().millisecondsSinceEpoch - 
            (cacheResult.metadata?.timestamp ?? 0);
        
        if (cacheAge > const Duration(hours: 24).inMilliseconds && 
            await _connectivityHelper.isConnected()) {
          _log.info('Cache is stale, refreshing in background');
          _refreshBookDataInBackground(bookId);
        }
        
        return cachedBook;
      }
      
      // Cache miss, fetch from Firestore
      _log.info('Cache miss for book $bookId, fetching from Firestore');
      final bookDoc = await _firestore.collection('books').doc(bookId).get();
      
      if (!bookDoc.exists || bookDoc.data() == null) {
        throw Exception('Book not found: $bookId');
      }
      
      // Create the book from the Firestore data
      final book = Book.fromMap(bookId, bookDoc.data()!);
      
      // Fetch volumes if available
      try {
        final volumeSnapshot = await _firestore
            .collection('books')
            .doc(bookId)
            .collection('volumes')
            .orderBy('sequence')
            .get();
        
        if (volumeSnapshot.docs.isNotEmpty) {
          book.volumes = volumeSnapshot.docs
              .map((doc) => Volume.fromMap(doc.id, doc.data()))
              .toList();
        }
      } catch (e) {
        _log.warning('Error fetching volumes for book $bookId: $e');
        // Continue without volumes
      }
      
      // Cache the complete book with volumes
      await _cacheService.cacheData(
        key: cacheKey,
        data: book.toMap(),
        boxName: CacheConstants.booksBoxName,
        ttl: _bookCacheTtl,
      );
      
      return book;
    } catch (e, stackTrace) {
      _log.severe('Error getting book data for $bookId: $e', e, stackTrace);
      rethrow;
    }
  }
  
  /// Get raw book data as a Map for caching purposes
  Future<Map<String, dynamic>> getBookDataRaw(String bookId) async {
    try {
      final bookDoc = await _firestore.collection('books').doc(bookId).get();
      
      if (!bookDoc.exists || bookDoc.data() == null) {
        return {};
      }
      
      return bookDoc.data()!;
    } catch (e) {
      _log.warning('Error getting raw book data for $bookId: $e');
      return {};
    }
  }
  
  /// Refresh book data in the background without blocking the UI
  Future<void> _refreshBookDataInBackground(String bookId) async {
    try {
      _log.info('Starting background refresh for book $bookId');
      
      // Fetch book data
      final bookDoc = await _firestore.collection('books').doc(bookId).get();
      
      if (!bookDoc.exists || bookDoc.data() == null) {
        return;
      }
      
      // Create book instance
      final book = Book.fromMap(bookId, bookDoc.data()!);
      
      // Fetch volumes if available
      try {
        final volumeSnapshot = await _firestore
            .collection('books')
            .doc(bookId)
            .collection('volumes')
            .orderBy('sequence')
            .get();
        
        if (volumeSnapshot.docs.isNotEmpty) {
          book.volumes = volumeSnapshot.docs
              .map((doc) => Volume.fromMap(doc.id, doc.data()))
              .toList();
        }
      } catch (e) {
        _log.warning('Error fetching volumes during background refresh: $e');
      }
      
      // Update the cache with fresh data
      final cacheKey = '${CacheConstants.bookKeyPrefix}$bookId';
      await _cacheService.cacheData(
        key: cacheKey,
        data: book.toMap(),
        boxName: CacheConstants.booksBoxName,
        ttl: _bookCacheTtl,
      );
      
      _log.info('Background refresh completed for book $bookId');
    } catch (e) {
      _log.warning('Error in background refresh for book $bookId: $e');
    }
  }
  
  /// Get book headings with caching
  @override
  Future<List<Heading>> getBookHeadings(String bookId) async {
    try {
      _log.info('Getting headings for book $bookId');
      
      final cacheKey = '${CacheConstants.bookKeyPrefix}${bookId}_headings';
      final cacheResult = await _cacheService.getCachedData<List<dynamic>>(
        key: cacheKey,
        boxName: CacheConstants.headingsBoxName,
      );
      
      if (cacheResult.hasData) {
        _log.info('Cache hit for headings of book $bookId');
        // Convert stored maps back to Heading objects
        final List<Heading> headings = [];
        for (final item in cacheResult.data!) {
          if (item is Map) {
            final map = Map<String, dynamic>.from(item);
            final id = map['id'] as String? ?? '';
            headings.add(Heading.fromMap(id, map));
          }
        }
        return headings;
      }
      
      _log.info('Cache miss for headings, fetching from Firestore');
      final snapshot = await _firestore
          .collection('books')
          .doc(bookId)
          .collection('headings')
          .orderBy('sequence')
          .get();
          
      final headings = snapshot.docs.map((doc) => 
        Heading.fromMap(doc.id, doc.data())
      ).toList();
      
      // Cache the headings as a list of maps for storage
      final headingMaps = headings.map((h) => h.toMap()).toList();
      await _cacheService.cacheData(
        key: cacheKey,
        data: headingMaps,
        boxName: CacheConstants.headingsBoxName,
        ttl: _headingCacheTtl,
      );
      
      return headings;
    } catch (e, stackTrace) {
      _log.severe('Error getting book headings for $bookId: $e', e, stackTrace);
      
      // In case of error, return an empty list instead of throwing
      // to prevent UI crashes and allow partial content to be displayed
      return [];
    }
  }
  
  /// Fetches a specific heading by its ID
  @override
  Future<dynamic> getHeadingById(String headingId) async {
    try {
      final headingDoc = await _firestore
          .collection('headings')
          .doc(headingId)
          .get();
          
      if (headingDoc.exists && headingDoc.data() != null) {
        return Heading.fromMap(headingId, headingDoc.data()!);
      }
      
      return null;
    } catch (e) {
      _log.warning('Error getting heading by ID: $e');
      return null;
    }
  }
  
  /// Get heading content with optimized caching
  Future<Map<String, dynamic>> getHeadingContent(String headingId) async {
    try {
      _log.info('Getting content for heading $headingId');
      
      final cacheKey = '${CacheConstants.headingContentKeyPrefix}$headingId';
      final cacheResult = await _cacheService.getCachedData<Map<String, dynamic>>(
        key: cacheKey,
        boxName: CacheConstants.contentBoxName,
      );
      
      if (cacheResult.hasData) {
        _log.info('Cache hit for heading content $headingId');
        return cacheResult.data!;
      }
      
      _log.info('Cache miss for heading content, fetching from Firestore');
      
      // Heading content could be in the headings collection or in a dedicated content collection
      // Try the dedicated content collection first
      final contentDoc = await _firestore
          .collection('headings')
          .doc(headingId)
          .get();
          
      if (contentDoc.exists && contentDoc.data() != null) {
        final content = contentDoc.data()!;
        
        // Cache the content
        await _cacheService.cacheData(
          key: cacheKey,
          data: content,
          boxName: CacheConstants.contentBoxName,
          ttl: _headingCacheTtl,
        );
        
        return content;
      }
      
      // Fall back to the headings subcollection
      // This is a fallback approach and won't be needed if all content is in the content collection
      final headingDoc = await _firestore
          .collection('headings')
          .doc(headingId)
          .get();
          
      if (headingDoc.exists && headingDoc.data() != null) {
        final data = headingDoc.data()!;
        
        // Cache the content
        await _cacheService.cacheData(
          key: cacheKey,
          data: data,
          boxName: CacheConstants.contentBoxName,
          ttl: _headingCacheTtl,
        );
        
        return data;
      }
      
      // If we can't find the content, return an empty map
      return {};
    } catch (e, stackTrace) {
      _log.severe('Error getting heading content $headingId: $e', e, stackTrace);
      
      // In case of error, return an empty map instead of throwing
      return {};
    }
  }
  
  /// Get bookmarks for a book with caching
  @override
  Future<List<Bookmark>> getBookmarks(String bookId) async {
    try {
      _log.info('Getting bookmarks for book $bookId');
      
      final cacheKey = '${CacheConstants.bookmarkKeyPrefix}$bookId';
      final cacheResult = await _cacheService.getCachedData<List<dynamic>>(
        key: cacheKey,
        boxName: CacheConstants.bookmarksBoxName,
      );
      
      if (cacheResult.hasData) {
        _log.info('Cache hit for bookmarks of book $bookId');
        
        try {
          final bookmarksList = <Bookmark>[];
          for (final item in cacheResult.data!) {
            if (item is Map<String, dynamic>) {
              final bookmark = Bookmark.fromJson(item);
              bookmarksList.add(bookmark);
            }
          }
          return bookmarksList;
        } catch (e) {
          _log.warning('Error parsing cached bookmarks, will fetch fresh data: $e');
          // Continue to fetch from Firestore on parse error
        }
      }
      
      _log.info('Cache miss for bookmarks, fetching from Firestore');
      
      // TODO: Implement user authentication and fetch user-specific bookmarks
      // For now, we're just fetching all bookmarks for the book regardless of user
      final snapshot = await _firestore
          .collection('bookmarks')
          .where('book_id', isEqualTo: bookId)
          .orderBy('created_at', descending: true)
          .get();
          
      final bookmarks = snapshot.docs
          .map((doc) {
            final data = doc.data();
            data['id'] = doc.id;
            return Bookmark.fromJson(data);
          })
          .toList();
      
      // Cache the bookmarks
      await _cacheService.cacheData(
        key: cacheKey,
        data: bookmarks.map((bookmark) => bookmark.toJson()).toList(),
        boxName: CacheConstants.bookmarksBoxName,
        ttl: _bookmarkCacheTtl,
      );
      
      return bookmarks;
    } catch (e, stackTrace) {
      _log.severe('Error getting bookmarks for $bookId: $e', e, stackTrace);
      return [];
    }
  }
  
  /// Add a bookmark with immediate cache update
  @override
  Future<bool> addBookmark(Bookmark bookmark) async {
    try {
      _log.info('Adding bookmark for book ${bookmark.bookId}');
      
      // Add to Firestore
      final docRef = await _firestore.collection('bookmarks').add(bookmark.toMap());
      
      // Update local bookmark with the new ID
      final updatedBookmark = bookmark.copyWith(id: docRef.id);
      
      // Update the cache
      final cacheKey = '${CacheConstants.bookmarkKeyPrefix}${bookmark.bookId}';
      final cacheResult = await _cacheService.getCachedData<List<dynamic>>(
        key: cacheKey,
        boxName: CacheConstants.bookmarksBoxName,
      );
      
      if (cacheResult.hasData) {
        _log.info('Updating bookmark cache for book ${bookmark.bookId}');
        
        try {
          final bookmarksList = <Bookmark>[];
          for (final item in cacheResult.data!) {
            if (item is Map<String, dynamic>) {
              final bookmark = Bookmark.fromJson(item);
              bookmarksList.add(bookmark);
            }
          }
          
          // Add the new bookmark to the list
          bookmarksList.insert(0, updatedBookmark); // Add to the beginning
          
          // Update the cache
          await _cacheService.cacheData(
            key: cacheKey,
            data: bookmarksList.map((bm) => bm.toMap()).toList(),
            boxName: CacheConstants.bookmarksBoxName,
            ttl: _bookmarkCacheTtl,
          );
        } catch (e) {
          _log.warning('Error updating bookmark cache: $e');
          // If there's an error updating the cache, invalidate it
          await _cacheService.remove(cacheKey, CacheConstants.bookmarksBoxName);
        }
      }
      
      return true;
    } catch (e, stackTrace) {
      _log.severe('Error adding bookmark: $e', e, stackTrace);
      return false;
    }
  }
  
  /// Remove a bookmark with immediate cache update
  @override
  Future<bool> removeBookmark(String bookmarkId, String bookId) async {
    try {
      _log.info('Removing bookmark $bookmarkId for book $bookId');
      
      // Remove from Firestore
      await _firestore.collection('bookmarks').doc(bookmarkId).delete();
      
      // Update the cache
      final cacheKey = '${CacheConstants.bookmarkKeyPrefix}$bookId';
      final cacheResult = await _cacheService.getCachedData<List<dynamic>>(
        key: cacheKey,
        boxName: CacheConstants.bookmarksBoxName,
      );
      
      if (cacheResult.hasData) {
        _log.info('Updating bookmark cache after removal for book $bookId');
        
        try {
          final bookmarks = <Bookmark>[];
          for (final item in cacheResult.data!) {
            if (item is Map<String, dynamic>) {
              final bookmark = Bookmark.fromJson(item);
              bookmarks.add(bookmark);
            }
          }
          
          // Remove the bookmark from the list
          bookmarks.removeWhere((bm) => bm.id == bookmarkId);
          
          // Update the cache
          await _cacheService.cacheData(
            key: cacheKey,
            data: bookmarksList.map((bm) => bm.toMap()).toList(),
            boxName: CacheConstants.bookmarksBoxName,
            ttl: _bookmarkCacheTtl,
          );
        } catch (e) {
          _log.warning('Error updating bookmark cache after removal: $e');
          // If there's an error updating the cache, invalidate it
          await _cacheService.remove(cacheKey, CacheConstants.bookmarksBoxName);
        }
      }
      
      return true;
    } catch (e, stackTrace) {
      _log.severe('Error removing bookmark $bookmarkId: $e', e, stackTrace);
      return false;
    }
  }
  
  // AI-related methods implementation
  @override
  Future<Map<String, dynamic>> generateBookSummary(String text, 
      {String? bookTitle, String? author, String? language}) async {
    // Placeholder for AI summary generation
    return {
      'summary': 'Summary generation is not yet implemented',
      'themes': ['theme1', 'theme2'],
    };
  }
  
  @override
  Future<List<Map<String, dynamic>>> getBookRecommendations(
    List<String> recentBooks, {
    String preferredGenre = '',
    List<String>? preferredAuthors,
    String? readerProfile,
  }) async {
    // Placeholder for AI recommendations
    return [
      {
        'id': 'book1',
        'title': 'Recommended Book 1',
        'author': 'Author 1',
        'reason': 'Based on your reading history'
      },
      {
        'id': 'book2',
        'title': 'Recommended Book 2',
        'author': 'Author 2',
        'reason': 'Popular in your preferred genre'
      },
      {
        'id': 'book3',
        'title': 'Recommended Book 3',
        'author': 'Author 3',
        'reason': 'New release from favorite author'
      },
    ];
  }
  
  /// Extract chapters from book content using AI
  @override
  Future<List<Map<String, dynamic>>> extractChaptersFromContent(
    String content, {
    String? bookType,
    String? bookTitle,
    bool isTableOfContents = false,
  }) async {
    // Placeholder implementation
    return [
      {'title': 'Chapter 1', 'content': 'Sample content...'},
      {'title': 'Chapter 2', 'content': 'Sample content...'},
    ];
  }
  
  /// Translate text to a target language with formatting preservation
  @override
  Future<Map<String, dynamic>> translateText(
    String text,
    String targetLanguage, {
    bool preserveFormatting = true,
  }) async {
    // Placeholder implementation
    return {
      'translation': 'Translated content would appear here',
      'detected_language': 'en',
      'target_language': targetLanguage,
    };
  }
  
  /// Semantic search for relevant content with explanations
  @override
  Future<List<Map<String, dynamic>>> searchWithinContent(
    String query,
    String bookContent,
  ) async {
    // Placeholder implementation
    return [
      {
        'content': 'Matching content excerpt...',
        'relevance': 0.95,
        'page': 42,
      },
    ];
  }
  
  /// Get explanations for difficult words with examples and context
  @override
  Future<Map<String, dynamic>> explainDifficultWords(
    String text, {
    String? targetLanguage,
    String? difficulty,
  }) async {
    // Placeholder implementation
    return {
      'explanations': [
        {
          'word': 'complex word',
          'explanation': 'Simple definition',
          'examples': ['Example usage']
        }
      ],
    };
  }
  
  /// Analyze text for themes and literary concepts
  @override
  Future<Map<String, dynamic>> analyzeThemesAndConcepts(String text) async {
    // Placeholder implementation
    return {
      'themes': ['Love', 'Betrayal'],
      'concepts': ['Irony', 'Metaphor'],
      'analysis': 'Analysis would appear here',
    };
  }
  
  /// Get recommended reading settings based on text sample and language
  @override
  Future<Map<String, dynamic>> getRecommendedReadingSettings(
    String textSample, {
    String? language,
  }) async {
    // Placeholder implementation
    return {
      'font_size': 18,
      'font_family': 'Georgia',
      'line_spacing': 1.5,
      'background_color': '#F5F5DC',
    };
  }
  
  /// Suggest important passages for bookmarking
  @override
  Future<List<Map<String, dynamic>>> suggestBookmarks(String text) async {
    // Placeholder implementation
    return [
      {
        'text': 'Important passage example...',
        'reason': 'Key idea introduction',
        'position': 0.35,
      },
    ];
  }
  
  /// Generate speech markers for text-to-speech
  @override
  Future<Map<String, dynamic>> generateTtsPrompt(
    String text, {
    String? voiceStyle,
    String? language,
  }) async {
    // Placeholder implementation
    return {
      'marked_text': '<speak>Marked text would appear here</speak>',
      'recommended_voice': 'en-US-Neural2-F',
    };
  }
  
  /// Get reading statistics with caching
  Future<Map<String, dynamic>> getReadingStats(String userId) async {
    try {
      _log.info('Getting reading stats for user $userId');
      
      final cacheKey = '${CacheConstants.userStatsKeyPrefix}$userId';
      final cacheResult = await _cacheService.getCachedData<Map<String, dynamic>>(
        key: cacheKey,
        boxName: CacheConstants.userBoxName,
      );
      
      if (cacheResult.hasData) {
        _log.info('Cache hit for reading stats of user $userId');
        return cacheResult.data!;
      }
      
      // If not in cache, fetch from Firestore
      _log.info('Cache miss for reading stats, fetching from Firestore');
      final doc = await _firestore.collection('user_stats').doc(userId).get();
      
      if (!doc.exists || doc.data() == null) {
        return {
          'books_read': 0,
          'reading_time': 0,
          'last_read': null,
        };
      }
      
      final stats = doc.data()!;
      
      // Cache the stats
      await _cacheService.cacheData(
        key: cacheKey,
        data: stats,
        boxName: CacheConstants.userBoxName,
        ttl: const Duration(days: 1),
      );
      
      return stats;
    } catch (e, stackTrace) {
      _log.severe('Error getting reading stats for $userId: $e', e, stackTrace);
      return {
        'books_read': 0,
        'reading_time': 0,
        'last_read': null,
      };
    }
  }
  
  // Debug method for Firestore structure
  @override
  Future<void> debugFirestoreStructure(String bookId) async {
    try {
      _log.info('Debug: Analyzing Firestore structure for book $bookId');
      
      // Book document
      final bookDoc = await _firestore.collection('books').doc(bookId).get();
      _log.info('Book exists: ${bookDoc.exists}');
      if (bookDoc.exists) {
        _log.info('Book fields: ${bookDoc.data()?.keys.join(', ')}');
      }
      
      // Headings subcollection
      final headingsSnapshot = await _firestore
          .collection('books')
          .doc(bookId)
          .collection('headings')
          .get();
      _log.info('Headings count: ${headingsSnapshot.docs.length}');
      
      // Volumes subcollection
      final volumesSnapshot = await _firestore
          .collection('books')
          .doc(bookId)
          .collection('volumes')
          .get();
      _log.info('Volumes count: ${volumesSnapshot.docs.length}');
      
      // Sample a heading to check structure
      if (headingsSnapshot.docs.isNotEmpty) {
        final sampleHeading = headingsSnapshot.docs.first;
        _log.info('Sample heading fields: ${sampleHeading.data().keys.join(', ')}');
      }
    } catch (e) {
      _log.severe('Error debugging Firestore structure: $e');
    }
  }
  
  // Offline reading methods
  @override
  Future<bool> downloadBookForOfflineReading(String bookId) async {
    try {
      _log.info('Downloading book $bookId for offline reading');
      
      // Get headings first since that's what we need to cache content
      final headings = await getBookHeadings(bookId);
      
      // Download heading content for each heading
      int downloadedHeadings = 0;
      for (final heading in headings) {
        try {
          // Make sure heading.id is a string
          final headingId = heading.id.toString();
          await getHeadingContent(headingId);
          downloadedHeadings++;
        } catch (e) {
          _log.warning('Error downloading content for heading ${heading.id}: $e');
        }
      }
      
      _log.info('Downloaded $downloadedHeadings/${headings.length} heading contents');
      
      return await isBookAvailableOffline(bookId);
    } catch (e) {
      _log.severe('Error downloading book for offline reading: $e');
      return false;
    }
  }
  
  @override
  Future<bool> isBookAvailableOffline(String bookId) async {
    return await isBookFullyCached(bookId);
  }
  
  @override
  Future<List<String>> getDownloadedBookIds() async {
    try {
      // Get all cached book keys
      final cachedBooks = await _cacheService.getCachedKeys(CacheConstants.booksBoxName);
      
      // Extract book IDs from cache keys (remove prefix)
      final bookIds = cachedBooks
          .where((key) => key.startsWith(CacheConstants.bookKeyPrefix))
          .map((key) => key.substring(CacheConstants.bookKeyPrefix.length))
          .toList();
      
      // Filter to only books that are fully cached
      final List<String> downloadedBooks = [];
      for (final bookId in bookIds) {
        if (await isBookAvailableOffline(bookId)) {
          downloadedBooks.add(bookId);
        }
      }
      
      return downloadedBooks;
    } catch (e) {
      _log.warning('Error getting downloaded book IDs: $e');
      return [];
    }
  }
  
  @override
  Stream<Map<String, dynamic>> getDownloadProgressStream() {
    // Create a stream controller to emit download progress events
    final controller = StreamController<Map<String, dynamic>>();
    
    // The actual implementation would track real download progress
    // This is a placeholder implementation
    Future<void> simulateProgress() async {
      await Future.delayed(const Duration(seconds: 1));
      controller.add({'bookId': '', 'progress': 0.0, 'status': 'idle'});
    }
    
    simulateProgress();
    
    return controller.stream;
  }
  
  /// Check if a book is available offline by verifying all its content is cached
  Future<bool> isBookFullyCached(String bookId) async {
    try {
      _log.info('Verifying cache status for book $bookId');
      
      // Check book data
      final bookCacheKey = '${CacheConstants.bookKeyPrefix}$bookId';
      final bookCacheResult = await _cacheService.getCachedData<Map<String, dynamic>>(
        key: bookCacheKey,
        boxName: CacheConstants.booksBoxName,
      );
      
      if (!bookCacheResult.hasData) {
        _log.info('Book $bookId is not cached');
        return false;
      }
      
      // Check headings
      final headingsCacheKey = '${CacheConstants.bookKeyPrefix}${bookId}_headings';
      final headingsCacheResult = await _cacheService.getCachedData<List<dynamic>>(
        key: headingsCacheKey,
        boxName: CacheConstants.headingsBoxName,
      );
      
      if (!headingsCacheResult.hasData) {
        _log.info('Headings for book $bookId are not cached');
        return false;
      }
      
      // Check if each heading's content is cached
      bool allContentCached = true;
      final headings = headingsCacheResult.data!;
      
      for (final heading in headings) {
        if (heading is Map && heading['id'] != null) {
          final headingId = heading['id'].toString();
          final contentCacheKey = '${CacheConstants.headingContentKeyPrefix}$headingId';
          final contentCacheResult = await _cacheService.getCachedData<Map<String, dynamic>>(
            key: contentCacheKey,
            boxName: CacheConstants.contentBoxName,
          );
          
          if (!contentCacheResult.hasData) {
            _log.info('Content for heading $headingId is not cached');
            allContentCached = false;
            break;
          }
        }
      }
      
      return allContentCached;
    } catch (e) {
      _log.warning('Error checking if book $bookId is fully cached: $e');
      return false;
    }
  }
}

/// Provider for Reading Repository
/// Uses AsyncValue for proper loading/error states
final readingRepositoryProvider = FutureProvider<ReadingRepository>((ref) async {
  final cacheService = await ref.watch(cacheServiceProvider.future);
  
  return ReadingRepositoryImpl(
    cacheService: cacheService,
    connectivityHelper: ConnectivityHelper.instance(),
  );
});
